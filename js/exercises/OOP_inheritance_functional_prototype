// -------------------------- example with animal constructor --------------------------

/* constructor functional inheritance

function Animal(name) {
  this.sayHi = function() {
    console.log('hello ' + name);
  };
}

var tiger = new Animal('Stripe');
tiger.sayHi();

*/

// constructor prototype inheritance

function Animal(name) {
  this._name = name;
}

Animal.prototype.sayHi = function() {
  console.log('hello ' + this._name);
};

var tiger = new Animal('Sherchan');
tiger.sayHi();

// -------------------------- example with coffee machine constructor --------------------------

// functional style

function CoffeeMachine(power) {
  var waterAmount = 0;

  var WATER_HEAT_CAPACITY = 4200;

  function getTimeToBoil() {
    return waterAmount * WATER_HEAT_CAPACITY * 80 / power;
  }

  this.run = function() {
    setTimeout(function() {
      alert( 'Кофе готов!' );
    }, getTimeToBoil());
  };

  this.setWaterAmount = function(amount) {
    waterAmount = amount;
  };

}


var coffeeMachine = new CoffeeMachine(10000);
coffeeMachine.setWaterAmount(50);
coffeeMachine.run(); 


// prototype style

function CoffeeMachine(power) {
  this._waterAmount = 0;
  this._power = power;
}

CoffeeMachine.prototype.WATER_HEAT_CAPACITY = 4200;

CoffeeMachine.prototype.getTimeToBoil = function() {
  return this._waterAmount * this._WATER_HEAT_CAPACITY * 80 / this._power;
};

CoffeeMachine.prototype.run = function() {
  setTimeout (function() {
      alert( 'coffee is ready!' );
    }, this.getTimeToBoil());
};

CoffeeMachine.prototype.setWaterAmount = function(amount) {
    this._waterAmount = amount;
  };

var coffeeMachine = new CoffeeMachine(10000);
coffeeMachine.setWaterAmount(50);
coffeeMachine.run(); 



